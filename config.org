My own personal emacs config
- Remember to use "<s tab" then use "emacs-lisp" to create source blocks 
* my own navigation/kill/yank/insert/etc. functions
#+BEGIN_SRC emacs-lisp
;; functions
(defun backward-kill-line ()
  "Kill a backward line"
  (interactive)
  (kill-line -1)
  )

(defun comment-or-uncomment-line-or-region ()
  "Comments or uncomments the current line or region."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    )
  )

(defun kill-line-or-region ()
  "kills current line or region."
  (interactive)
  (if (region-active-p)
      (kill-region (region-beginning)(region-end))
    (kill-region (line-beginning-position) (line-end-position))
    )
  )

(defun my-insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%Y-%m-%d %H:%M") 
                   ((equal prefix '(4)) "%Y-%m-%d")
                   ((equal prefix '(16)) "%A, %d. %B %Y")))
          )
      (insert (format-time-string format))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;               insert a file name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-insert-file-name (filename &optional args)
    "Insert name of file FILENAME into buffer after point.
  
  Prefixed with \\[universal-argument], expand the file name to
  its fully canocalized path.  See `expand-file-name'.
  
  Prefixed with \\[negative-argument], use relative path to file
  name from current directory, `default-directory'.  See
  `file-relative-name'.
  
  The default with no prefix is to insert the file name exactly as
  it appears in the minibuffer prompt."
    ;; Based on insert-file in Emacs -- ashawley 20080926
    (interactive "*fInsert file name: \nP")
    (cond ((eq '- args)
           (insert (file-relative-name filename)))
          ((not (null args))
           (insert (expand-file-name filename)))
          (t
           (insert filename))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;Cleanup commands;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun untabify-buffer ()
  "Untabify current buffer"
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

#+END_SRC
* global keybindings
** Navigation
#+BEGIN_SRC emacs-lisp
(define-key input-decode-map [?\C-m] [C-m])
(global-set-key (kbd "C-t") 'previous-line)
(global-set-key (kbd "C-w") 'next-line)
(global-set-key (kbd "C-n") 'forward-char)
(global-set-key (kbd "<C-m>") 'backward-char)
(global-set-key (kbd "C-S-t") 'scroll-down)
(global-set-key (kbd "C-S-w") 'scroll-up)
(global-set-key (kbd "C-S-n") 'forward-word)
(global-set-key (kbd "C-S-m") 'backward-word)
(global-set-key (kbd "C-x C-n") 'end-of-line)
(global-set-key (kbd "C-x <C-m>") 'beginning-of-line)
(global-set-key (kbd "C-x C-w") 'end-of-buffer)
(global-set-key (kbd "C-x C-t") 'beginning-of-buffer)

(global-set-key (kbd "M-d") 'other-window)
(global-set-key (kbd "C-o") 'split-window-right)
(global-set-key (kbd "C-S-o") 'split-window-below)
(global-set-key (kbd "C-x C-o") 'delete-window)
(global-set-key (kbd "C-k") 'kill-buffer-and-window)

(global-set-key (kbd "C-b") 'switch-to-next-buffer)
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
(global-set-key (kbd "M-b") 'switch-to-prev-buffer)
#+END_SRC
** help
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Killing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t") 'backward-kill-line)
(global-set-key (kbd "M-w") 'kill-line)
(global-set-key (kbd "M-n") 'delete-forward-char)
(global-set-key (kbd "M-m") 'delete-backward-char)
(global-set-key (kbd "M-S-t") 'previous-line)
(global-set-key (kbd "M-S-w") 'next-line)
(global-set-key (kbd "M-N") 'kill-word)
(global-set-key (kbd "M-M") 'backward-kill-word)

#+END_SRC
** Copy, Cut, Paste, Undo
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s--") 'copy-region-as-kill)
  (global-set-key (kbd "C-=") 'yank)
  ;; (global-set-key (kbd "C-s-=") 'yank-pop)
  (global-set-key (kbd "C--") 'kill-line-or-region)
  (global-set-key (kbd "C-z") 'undo)
#+END_SRC
** Keyboard quit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-q") 'keyboard-quit)
#+END_SRC
** Commenting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)
#+END_SRC
** Macros
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-,") 'kmacro-start-macro)
(global-set-key (kbd "C-x C-.") 'kmacro-end-macro)
(global-set-key (kbd "C-x C-/") 'kmacro-end-and-call-macro)
#+END_SRC
** my custom functions
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-c i d"    'my-insert-date)
(global-set-key "\C-c i f" 'my-insert-file-name)
(global-set-key "\C-c n"    'cleanup-buffer)

(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))

(defun my-decrement-number-decimal (&optional arg)
  (interactive "p*")
  (my-increment-number-decimal (if arg (- arg) -1)))


#+END_SRC
** unset keybindings
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-c C-s"))
#+END_SRC
** org links
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
* shell commands to run at startup
#+BEGIN_SRC sh
setxkbmap -option ctrl:nocaps  
#+END_SRC
* Emacs appearece menu,toolbar,scrollbar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) 
  (toggle-scroll-bar -1) 
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode t)
(setq line-number-mode t)                     ;start in line-number-mode
(setq column-number-mode t)                   ;start in column-number-mode
(use-package rainbow-delimiters
:config
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* Emacs global settings
#+BEGIN_SRC emacs-lisp
(tooltip-mode nil)                      ; one-line help text in the echo area
(electric-indent-mode 1)

;;dont have to use "yes" or "no" instead use "y" or "n"
(defalias 'yes-or-no-p 'y-or-n-p)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; emacs autocomplete with tab;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook
 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nil)))

(autoload 'bash-completion-dynamic-complete 
   "bash-completion"
   "BASH completion hook")
 (add-hook 'shell-dynamic-complete-functions
   'bash-completion-dynamic-complete)

;;;; sudo completion
(defun pcomplete/sudo ()
  "Completion rules for the `sudo' command."
  (let ((pcomplete-ignore-case t))
    (pcomplete-here (funcall pcomplete-command-completion-function))
    (while (pcomplete-here (pcomplete-entries)))))

(setq eshell-cmpl-cycle-completions nil)

;;tab key fix
(setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))

(use-package smartparens
:ensure t
:config 
(smartparens-global-mode 1)
)

(use-package openwith
:ensure t
:config
(openwith-mode t)
(setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
)
#+END_SRC

* speed up startup
#+BEGIN_SRC emacs-lisp
;;; Temporarily reduce garbage collection during startup. Inspect `gcs-done'.
(defun ambrevar/reset-gc-cons-threshold ()
  (setq gc-cons-threshold (car (get 'gc-cons-threshold 'standard-value))))
(setq gc-cons-threshold (* 64 1024 1024))
(add-hook 'after-init-hook #'ambrevar/reset-gc-cons-threshold)

;;; Temporarily disable the file name handler.
(setq default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(defun ambrevar/reset-file-name-handler-alist ()
  (setq file-name-handler-alist default-file-name-handler-alist))
(add-hook 'after-init-hook #'ambrevar/reset-file-name-handler-alist)

#+END_SRC

* key chord
#+BEGIN_SRC emacs-lisp
(use-package key-chord
:ensure t
:config
(key-chord-mode 1)

)
#+END_SRC
* Python-elpy
** My pdb functions
- in order to make these functions work I need to import all of python mode.. Its ridiculous
#+BEGIN_SRC emacs-lisp
(use-package python-mode 
     :ensure t

)
#+END_SRC
- now we import my functions
#+BEGIN_SRC emacs-lisp
(require 'pdb_emacs.el)

#+END_SRC
** initialize elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy  
  :ensure t
  :config 
  (elpy-enable)
  (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
  (setq python-shell-interpreter "ipython"
      ;; python-shell-interpreter-args "--profile=my_pylab"
                                          )
  (key-chord-define-global ".3" 'ipython)
  (defun my-elpy-hook ()
      (define-key my-keys-minor-mode-map (kbd "C-S-i") nil)
      (define-key my-keys-minor-mode-map (kbd "C-S-k") nil)
      (local-set-key (kbd "M-t") 'elpy-nav-move-line-or-region-up)
      (local-set-key (kbd "M-w") 'elpy-nav-move-line-or-region-down)
      (local-set-key (kbd "M-r") 'elpy-nav-indent-shift-right)
      (local-set-key (kbd "M-h") 'elpy-nav-indent-shift-left)
      (local-set-key (kbd "C-c p") 'my-insert-pdb-break)
      (local-set-key (kbd "C-c o") 'my-pdb-cleanup)
      (local-set-key (kbd "C-c C-/")    'my-increment-number-decimal)
      (local-set-key (kbd "C-c C-l")    'my-decrement-number-decimal)
      (setq elpy-disable-backend-error-display 1)
      )
  (add-hook 'elpy-mode-hook 'my-elpy-hook)


#+END_SRC
* ipython settings
#+BEGIN_SRC emacs-lisp

 (defun my-inf-py-hook ()
        (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
        (local-set-key "\C-cp" 'pdb-pm)
        )
        (add-hook 'inferior-python-mode-hook 'my-inf-py-hook) 
        
      )

(defun eshell/sp ()
  (setq python-shell-interpreter "isympy3")
  (setq python-shell-interpreter-args "--pretty=unicode -I --")
  (run-python)
  (python-shell-switch-to-shell)
  (delete-other-windows)
  )
#+END_SRC
* Org-mode
** config
#+BEGIN_SRC emacs-lisp
(use-package org
:bind("C-c a". org-agenda)
:config
(setq org-log-done t)
(setq org-agenda-files (list "~/org/agenda/work.org"
                             "~/org/agenda/buy.org"
                             "~/org/agenda/school.org" 
                             "~/org/agenda/home.org"
                             "~/org/agenda/lab.org"
                             "~/org/agenda/qbic.org"))
(add-hook 'org-mode-hook (lambda () (modify-syntax-entry (string-to-char "\u25bc") "w"))) ; Down arrow for collapsed drawer.
(setq org-startup-indented t)
(setq org-hide-leading-stars t)
(setq org-odd-level-only nil) 
(setq org-insert-heading-respect-content nil)
(setq org-M-RET-may-split-line '((item) (default . t)))
(setq org-special-ctrl-a/e t)
(setq org-return-follows-link nil)
(setq org-use-speed-commands t)
(setq org-startup-align-all-tables nil)
(setq org-log-into-drawer nil)
(setq org-tags-column 1)
(setq org-ellipsis " \u25bc" )
(setq org-speed-commands-user nil)
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
(setq org-completion-use-ido t)
(setq org-indent-mode t)
(setq org-startup-truncated nil)
(setq auto-fill-mode -1)
(setq-default fill-column 99999)
(setq fill-column 99999)
(global-auto-revert-mode t)
(prefer-coding-system 'utf-8)
;; (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode nil)               ;; No region when it is not highlighted
;; (setq cua-keep-region-after-copy t) 
(global-set-key (kbd "C-c c") 'org-capture)
;;(org-babel-do-load-languages
;; 'org-babel-load-languages
;;'((python . t)))

;;(require 'ob-shell)
;;(org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))

(defun org-override-keys ()
(local-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)
(local-set-key (kbd "M-h") 'org-metaleft)
(local-set-key (kbd "M-r") 'org-metaright)
)

(add-hook 'org-mode-hook 'org-override-keys)
)

(defun my-org-agenda-hook ()
        (local-set-key (kbd "C-t") 'org-agenda-previous-line)
        (local-set-key (kbd "C-w") 'org-agenda-next-line)
               )
(add-hook 'org-agenda-mode-hook 'my-org-agenda-hook)
    


#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'tron-legacy t)

#+END_SRC
* multiple cursors
#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
:ensure t
:config
(multiple-cursors-mode 1)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
)
#+END_SRC
* custom
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
)
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:config
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(helm-mode 1)
(key-chord-define-global "r0" 'helm-find-files)
(global-set-key (kbd "C-s-=") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
(define-key helm-map (kbd "C-w") 'helm-next-line)
(define-key helm-map (kbd "C-t") 'helm-previous-line)
(define-key helm-find-files-map (kbd "M-M") 'helm-find-files-up-one-level)
(define-key helm-find-files-map (kbd "C-n") 'forward-char)
(define-key helm-find-files-map (kbd "M-m") 'delete-backward-char)
(define-key helm-find-files-map (kbd "M-n") 'delete-forward-char)
)
#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
(defun helm-override-keys ()
)

(add-hook 'helm-mode-hook 'helm-override-keys)

#+END_SRC
* Rainbow parenthesis matching
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'arduino-mode-hook 'rainbow-delimiters-mode)
  )
#+END_SRC
* my local keybindings
** the override keys
#+BEGIN_SRC emacs-lisp

(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
(define-key my-keys-minor-mode-map (kbd "C-t") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "C-<m>") 'backward-char)
(define-key my-keys-minor-mode-map (kbd "C-w") 'next-line)
(define-key my-keys-minor-mode-map (kbd "C-n") 'forward-char)

(define-key my-keys-minor-mode-map (kbd "C-x C-n") 'end-of-line)
(define-key my-keys-minor-mode-map (kbd "C-x C-<m>") 'beginning-of-line)
(define-key my-keys-minor-mode-map (kbd "C-x C-w") 'end-of-buffer)
(define-key my-keys-minor-mode-map (kbd "C-x C-t") 'beginning-of-buffer)


(define-key my-keys-minor-mode-map (kbd "C-S-t") 'scroll-down)
(define-key my-keys-minor-mode-map (kbd "C-S-w") 'scroll-up)
(define-key my-keys-minor-mode-map (kbd "C-S-t") 'backward-paragraph)
(define-key my-keys-minor-mode-map (kbd "C-S-w") 'forward-paragraph)
(define-key my-keys-minor-mode-map (kbd "C-S-n") 'forward-word)
(define-key my-keys-minor-mode-map (kbd "C-S-m") 'backward-word)

(define-key my-keys-minor-mode-map (kbd "M-d") 'other-window)
(define-key my-keys-minor-mode-map (kbd "C-o") 'split-window-right)
(define-key my-keys-minor-mode-map (kbd "C-S-o") 'split-window-below)
(define-key my-keys-minor-mode-map (kbd "C-x C-o") 'delete-window)

(define-key my-keys-minor-mode-map (kbd "C-b") 'switch-to-next-buffer)
;;(define-key my-keys-minor-mode-map (kbd "C-x C-b") 'switch-to-buffer)

;;killing
(define-key my-keys-minor-mode-map (kbd "M-t") 'backward-kill-line)
(define-key my-keys-minor-mode-map (kbd "M-w") 'kill-line)
(define-key my-keys-minor-mode-map (kbd "M-n") 'delete-forward-char)
(define-key my-keys-minor-mode-map (kbd "M-m") 'delete-backward-char)
(define-key my-keys-minor-mode-map (kbd "M-S-t") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "M-S-w") 'next-line)
(define-key my-keys-minor-mode-map (kbd "M-S-n") 'kill-word)
(define-key my-keys-minor-mode-map (kbd "M-S-m") 'backward-kill-word)

;; copy,cut,paste,undo
(define-key my-keys-minor-mode-map (kbd "C-s--") 'copy-region-as-kill)
(define-key my-keys-minor-mode-map (kbd "C-=") 'yank)
;;(define-key my-keys-minor-mode-map (kbd "C-s-=") 'yank-pop)
(define-key my-keys-minor-mode-map (kbd "C--") 'kill-line-or-region)
(define-key my-keys-minor-mode-map (kbd "C-z") 'undo)

;;keyboard quit
(define-key my-keys-minor-mode-map (kbd "M-q") 'keyboard-quit)

;;commenting
(define-key my-keys-minor-mode-map (kbd "C-/") 'comment-or-uncomment-line-or-region)

;;write file
(define-key my-keys-minor-mode-map (kbd "C-x C-,") 'write-file)

;;easy underscore

(defun insert-underscore ()
  (interactive)
  (insert "_"))
(global-set-key (kbd "S-SPC")    'insert-underscore) ;for easy function naming

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

;;;;;;;;;on startup;;;;;;;;
(my-keys-minor-mode 1)

#+END_SRC
** where not to override
These things have to take the form:
(defun my-foo-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'foo-hook 'my-foo-setup-hook)
#+BEGIN_SRC emacs-lisp

;;;;;;;;everything else ;;;;;;;

(defun my-minibuffer-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)


(defun my-erc-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'erc-mode-hook 'my-erc-setup-hook)

(defun my-kotl-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'kotl-mode-hook 'my-kotl-setup-hook)

#+END_SRC
* tramp settings for accessing remote servers
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'tramp-default-method "ssh")
#+END_SRC
* ssh 
#+BEGIN_SRC emacs-lisp
(use-package ssh
:ensure t
:config
    (add-hook 'ssh-mode-hook
              (lambda ()
                (setq ssh-directory-tracking-mode t)
                (shell-dirtrack-mode t)
                (setq dirtrackp nil))))

 

(require 'ssh)
#+END_SRC
* elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
  :ensure t
  :config
  (setq-default elfeed-search-filter "@3-weeks-ago +unread")
  (global-set-key (kbd "C-x w") 'elfeed)

  (defun elfeed-show-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-show-visit use-generic-p)))

  (defun elfeed-search-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-search-browse-url use-generic-p)))

  ;;lazy elfeed scroll and new page
  (defun elfeed-scroll-up-command (&optional arg)
    "Scroll up or go to next feed item in Elfeed"
    (interactive "^P")
    (let ((scroll-error-top-bottom nil))
      (condition-case-unless-debug nil
          (scroll-up-command arg)
        (error (elfeed-show-next)))))
  
  (defun elfeed-scroll-down-command (&optional arg)
    "Scroll up or go to next feed item in Elfeed"
    (interactive "^P")
    (let ((scroll-error-top-bottom nil))
      (condition-case-unless-debug nil
          (scroll-down-command arg)
        (error (elfeed-show-prev)))))
  :bind
      (:map elfeed-show-mode-map
           ("B" . elfeed-show-eww-open)
           ("SPC" . elfeed-scroll-up-command)
           ("S-SPC" . elfeed-scroll-down-command))
      (:map elfeed-search-mode-map
           ("B" . elfeed-search-eww-open)))

  (use-package elfeed-goodies
  :ensure t
  :config
  (elfeed-goodies/setup))

  (use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+END_SRC

 
