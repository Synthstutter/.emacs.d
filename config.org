My own personal emacs config
- Remember to use "<s tab" then use "emacs-lisp" to create source blocks 
* my own navigation/kill/yank/insert/etc. functions
#+BEGIN_SRC emacs-lisp
;; functions
(defun backward-kill-line ()
  "Kill a backward line"
  (interactive)
  (kill-line -1)
  )

(defun comment-or-uncomment-line-or-region ()
  "Comments or uncomments the current line or region."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    )
  )

(defun kill-line-or-region ()
  "kills current line or region."
  (interactive)
  (if (region-active-p)
      (kill-region (region-beginning)(region-end))
    (kill-region (line-beginning-position) (line-end-position))
    )
  )

(defun my-insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%Y-%m-%d %H:%M") 
                   ((equal prefix '(4)) "%Y-%m-%d")
                   ((equal prefix '(16)) "%A, %d. %B %Y")))
          )
      (insert (format-time-string format))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;               insert a file name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-insert-file-name (filename &optional args)
    "Insert name of file FILENAME into buffer after point.
  
  Prefixed with \\[universal-argument], expand the file name to
  its fully canocalized path.  See `expand-file-name'.
  
  Prefixed with \\[negative-argument], use relative path to file
  name from current directory, `default-directory'.  See
  `file-relative-name'.
  
  The default with no prefix is to insert the file name exactly as
  it appears in the minibuffer prompt."
    ;; Based on insert-file in Emacs -- ashawley 20080926
    (interactive "*fInsert file name: \nP")
    (cond ((eq '- args)
           (insert (file-relative-name filename)))
          ((not (null args))
           (insert (expand-file-name filename)))
          (t
           (insert filename))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;Cleanup commands;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun untabify-buffer ()
  "Untabify current buffer"
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

#+END_SRC
* global keybindings
** Navigation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-i") 'previous-line)
(global-set-key (kbd "C-k") 'next-line)
(global-set-key (kbd "C-l") 'forward-char)
(global-set-key (kbd "C-j") 'backward-char)
(global-set-key (kbd "C-S-i") 'scroll-down)
(global-set-key (kbd "C-S-k") 'scroll-up)
(global-set-key (kbd "C-S-l") 'forward-word)
(global-set-key (kbd "C-S-j") 'backward-word)
(global-set-key (kbd "C-x C-l") 'end-of-line)
(global-set-key (kbd "C-x C-j") 'beginning-of-line)
(global-set-key (kbd "C-x C-k") 'end-of-buffer)
(global-set-key (kbd "C-x C-i") 'beginning-of-buffer)

(global-set-key (kbd "M-d") 'other-window)
(global-set-key (kbd "C-o") 'split-window-right)
(global-set-key (kbd "C-S-o") 'split-window-below)
(global-set-key (kbd "C-x C-o") 'delete-window)

(global-set-key (kbd "C-b") 'switch-to-next-buffer)
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
(global-set-key (kbd "M-b") 'switch-to-prev-buffer)
#+END_SRC
** Killing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-i") 'backward-kill-line)
(global-set-key (kbd "M-k") 'kill-line)
(global-set-key (kbd "M-l") 'delete-forward-char)
(global-set-key (kbd "M-j") 'delete-backward-char)
(global-set-key (kbd "M-S-i") 'previous-line)
(global-set-key (kbd "M-S-k") 'next-line)
(global-set-key (kbd "M-L") 'kill-word)
(global-set-key (kbd "M-J") 'backward-kill-word)
#+END_SRC
** Copy, Cut, Paste, Undo
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s--") 'copy-region-as-kill)
  (global-set-key (kbd "C-=") 'yank)
  ;; (global-set-key (kbd "C-s-=") 'yank-pop)
  (global-set-key (kbd "C--") 'kill-line-or-region)
  (global-set-key (kbd "C-z") 'undo)
#+END_SRC
** Keyboard quit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-q") 'keyboard-quit)
#+END_SRC
** Commenting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)
#+END_SRC
** Macros
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-,") 'kmacro-start-macro)
(global-set-key (kbd "C-x C-.") 'kmacro-end-macro)
(global-set-key (kbd "C-x C-/") 'kmacro-end-and-call-macro)
#+END_SRC
** my custom functions
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-c i d"    'my-insert-date)
(global-set-key "\C-c i f" 'my-insert-file-name)
(global-set-key "\C-c n"    'cleanup-buffer)
#+END_SRC
** unset keybindings
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-c C-s"))
#+END_SRC
* my local keybindings
** the override keys
#+BEGIN_SRC emacs-lisp

(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
(define-key my-keys-minor-mode-map (kbd "C-i") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "C-j") 'backward-char)
(define-key my-keys-minor-mode-map (kbd "C-i") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "C-k") 'next-line)
(define-key my-keys-minor-mode-map (kbd "C-l") 'forward-char)
(define-key my-keys-minor-mode-map (kbd "C-j") 'backward-char)

(define-key my-keys-minor-mode-map (kbd "C-x C-l") 'end-of-line)
(define-key my-keys-minor-mode-map (kbd "C-x C-j") 'beginning-of-line)
(define-key my-keys-minor-mode-map (kbd "C-x C-k") 'end-of-buffer)
(define-key my-keys-minor-mode-map (kbd "C-x C-i") 'beginning-of-buffer)


(define-key my-keys-minor-mode-map (kbd "C-S-i") 'scroll-down)
(define-key my-keys-minor-mode-map (kbd "C-S-k") 'scroll-up)
(define-key my-keys-minor-mode-map (kbd "C-S-i") 'backward-paragraph)
(define-key my-keys-minor-mode-map (kbd "C-S-k") 'forward-paragraph)
(define-key my-keys-minor-mode-map (kbd "C-S-l") 'forward-word)
(define-key my-keys-minor-mode-map (kbd "C-S-j") 'backward-word)

(define-key my-keys-minor-mode-map (kbd "M-d") 'other-window)
(define-key my-keys-minor-mode-map (kbd "C-o") 'split-window-right)
(define-key my-keys-minor-mode-map (kbd "C-S-o") 'split-window-below)
(define-key my-keys-minor-mode-map (kbd "C-x C-o") 'delete-window)

(define-key my-keys-minor-mode-map (kbd "C-b") 'switch-to-next-buffer)
;;(define-key my-keys-minor-mode-map (kbd "C-x C-b") 'switch-to-buffer)

;;killing
(define-key my-keys-minor-mode-map (kbd "M-i") 'backward-kill-line)
(define-key my-keys-minor-mode-map (kbd "M-k") 'kill-line)
(define-key my-keys-minor-mode-map (kbd "M-l") 'delete-forward-char)
(define-key my-keys-minor-mode-map (kbd "M-j") 'delete-backward-char)
(define-key my-keys-minor-mode-map (kbd "M-S-i") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "M-S-k") 'next-line)
(define-key my-keys-minor-mode-map (kbd "M-S-l") 'kill-word)
(define-key my-keys-minor-mode-map (kbd "M-S-j") 'backward-kill-word)

;; copy,cut,paste,undo
(define-key my-keys-minor-mode-map (kbd "C-s--") 'copy-region-as-kill)
(define-key my-keys-minor-mode-map (kbd "C-=") 'yank)
;;(define-key my-keys-minor-mode-map (kbd "C-s-=") 'yank-pop)
(define-key my-keys-minor-mode-map (kbd "C--") 'kill-line-or-region)
(define-key my-keys-minor-mode-map (kbd "C-z") 'undo)

;;keyboard quit
(define-key my-keys-minor-mode-map (kbd "M-q") 'keyboard-quit)

;;commenting
(define-key my-keys-minor-mode-map (kbd "C-/") 'comment-or-uncomment-line-or-region)

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

;;;;;;;;;on startup;;;;;;;;
(my-keys-minor-mode 1)

#+END_SRC
** where not to override
These things have to take the form:
(defun my-foo-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'foo-hook 'my-foo-setup-hook)
#+BEGIN_SRC emacs-lisp

;;;;;;;;everything else ;;;;;;;

(defun my-minibuffer-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)


(defun my-erc-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'erc-mode-hook 'my-erc-setup-hook)


#+END_SRC
* shell commands to run at startup
#+BEGIN_SRC sh
setxkbmap -option ctrl:nocaps  
#+END_SRC
* Emacs appearece menu,toolbar,scrollbar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) 
  (toggle-scroll-bar -1) 
  (tool-bar-mode -1)
  (show-paren-mode t)
  
#+END_SRC
* Emacs global settings
#+BEGIN_SRC emacs-lisp
(tooltip-mode nil)                      ; one-line help text in the echo area
(electric-indent-mode 1)

;;dont have to use "yes" or "no" instead use "y" or "n"
(defalias 'yes-or-no-p 'y-or-n-p)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; emacs autocomplete with tab;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook
 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nil)))

(setq eshell-cmpl-cycle-completions nil)

;;tab key fix
(setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))

(use-package smartparens
:ensure t
:config 
(smartparens-global-mode 1)
)

;; (use-package flycheck
;; :ensure t
;; :config
;; (add-hook 'after-init-hook 'global-flycheck-mode)
;;)

#+END_SRC

* Python-elpy
** My pdb functions
- in order to make these functions work I need to import all of python mode.. Its ridiculous
#+BEGIN_SRC emacs-lisp
(use-package python-mode 
     :ensure t
)
#+END_SRC
- now we import my functions
#+BEGIN_SRC emacs-lisp
(require 'pdb_emacs.el)
#+END_SRC

** initialize elpy
#+BEGIN_SRC emacs-lisp
    (use-package elpy  
    :ensure t
    :config 
    (elpy-enable)
    (elpy-use-ipython)
    (defun my-elpy-hook ()
        (define-key my-keys-minor-mode-map (kbd "C-S-i") nil)
        (define-key my-keys-minor-mode-map (kbd "C-S-k") nil)
        (local-set-key (kbd "M-I") 'elpy-nav-move-line-or-region-up)
        (local-set-key (kbd "M-K") 'elpy-nav-move-line-or-region-down)
        (local-set-key (kbd "M-o") 'elpy-nav-indent-shift-right)
        (local-set-key (kbd "M-u") 'elpy-nav-indent-shift-left)
        (local-set-key (kbd "C-S-i") 'elpy-nav-backward-block)
        (local-set-key (kbd "C-S-k") 'elpy-nav-forward-block)
        (local-set-key (kbd "C-c p") 'my-insert-pdb-import-and-break)
        (local-set-key (kbd "C-c o") 'my-pdb-cleanup)
        )
    (add-hook 'elpy-mode-hook 'my-elpy-hook)
  )
#+END_SRC
* ipython settings
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "--pylab -i --simple-prompt"
      )
#+END_SRC
* Org-mode
** config
#+BEGIN_SRC emacs-lisp
(use-package org
:bind("C-c a". org-agenda)
:config
(setq org-log-done t)
(setq org-agenda-files (list "~/org/agenda/work.org"
                             "~/org/agenda/buy.org"
                             "~/org/agenda/school.org" 
                             "~/org/agenda/home.org"
                             "~/org/agenda/lab.org"
                             "~/org/agenda/qbic.org"))
(add-hook 'org-mode-hook (lambda () (modify-syntax-entry (string-to-char "\u25bc") "w"))) ; Down arrow for collapsed drawer.
(setq org-startup-indented t)
(setq org-hide-leading-stars t)
(setq org-odd-level-only nil) 
(setq org-insert-heading-respect-content nil)
(setq org-M-RET-may-split-line '((item) (default . t)))
(setq org-special-ctrl-a/e t)
(setq org-return-follows-link nil)
(setq org-use-speed-commands t)
(setq org-startup-align-all-tables nil)
(setq org-log-into-drawer nil)
(setq org-tags-column 1)
(setq org-ellipsis " \u25bc" )
(setq org-speed-commands-user nil)
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
(setq org-completion-use-ido t)
(setq org-indent-mode t)
(setq org-startup-truncated nil)
(setq auto-fill-mode -1)
(setq-default fill-column 99999)
(setq fill-column 99999)
(global-auto-revert-mode t)
(prefer-coding-system 'utf-8)
;; (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode nil)               ;; No region when it is not highlighted
;; (setq cua-keep-region-after-copy t) 
)

(global-set-key (kbd "C-c c") 'org-capture)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))

(require 'ob-sh)
(org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))
#+END_SRC
** my-org-functions
#+BEGIN_SRC emacs-lisp

#+END_SRC
** override keys
#+BEGIN_SRC emacs-lisp
(defun org-override-keys ()
(local-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)
(local-set-key (kbd "M-u") 'org-metaleft)
(local-set-key (kbd "M-o") 'org-metaright)
)

(add-hook 'org-mode-hook 'org-override-keys)
#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp

(use-package zenburn-theme
:ensure t
:config
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'zenburn t)
)
#+END_SRC
* custom
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Arduino mode
#+BEGIN_SRC emacs-lisp
(use-package arduino-mode
:ensure t
)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp


(use-package yasnippet
:ensure t
:config
(yas-global-mode 1)
(define-key yas-minor-mode-map [(tab)] nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "C-x C-y") 'yas-expand))

;;; auto complete mod
;;; should be loaded after yasnippet so that they can work together
(use-package auto-complete-config
:config
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
)



;;; set the trigger key so that it can work together with yasnippet on tab key,
;;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;;; activate, otherwise, auto-complete will
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
)
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:config
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(helm-mode 1)
(global-set-key (kbd "C-s-=") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
(define-key helm-map (kbd "C-k") 'helm-next-line)
(define-key helm-map (kbd "C-i") 'helm-previous-line)
)
#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
(defun helm-override-keys ()
)

(add-hook 'helm-mode-hook 'helm-override-keys)

#+END_SRC
* key chord
#+BEGIN_SRC emacs-lisp
(use-package key-chord
:ensure t
:config
(key-chord-mode 1)
(key-chord-define-global "o0" 'helm-find-files)
)
#+END_SRC
* Rainbow parenthesis matching
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'arduino-mode-hook 'rainbow-delimiters-mode)
  )
#+END_SRC
* org zot
#+BEGIN_SRC emacs-lisp
(use-package zotxt
    :ensure t
    :config 

;; Activate org-zotxt-mode in org-mode buffers
(add-hook 'org-mode-hook (lambda () (org-zotxt-mode 1)))
;; Bind something to replace the awkward C-u C-c " i
(define-key org-mode-map
  (kbd "C-c \" \"") (lambda () (interactive)
                      (org-zotxt-insert-reference-link '(4))))
;; Change citation format to be less cumbersome in files.
;; You'll need to install mkbehr-short into your style manager first.
(eval-after-load "zotxt"
'(setq zotxt-default-bibliography-style "mkbehr-short")))
;;'(setq zotxt-default-bibliography-style "apa")))
#+END_SRC
* easyPG
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
    (epa-file-enable)
#+END_SRC
* orgmobile
#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "/home/nick/Dropbox/org_agenda")
;; moble sync
(defvar org-mobile-sync-timer nil)
(defvar org-mobile-sync-idle-secs (* 60 10))
(defun org-mobile-sync ()
  (interactive)
  (org-mobile-pull)
  (org-mobile-push))
(defun org-mobile-sync-enable ()
  "enable mobile org idle sync"
  (interactive)
  (setq org-mobile-sync-timer
        (run-with-idle-timer org-mobile-sync-idle-secs t
                             'org-mobile-sync)));
(defun org-mobile-sync-disable ()
  "disable mobile org idle sync"
  (interactive)
  (cancel-timer org-mobile-sync-timer))
(org-mobile-sync-enable)
#+END_SRC
* ledger mode
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
    :ensure t
    :config 

(autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
(add-to-list 'load-path
             (expand-file-name "/path/to/ledger/source/lisp/"))
(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
(add-to-list 'auto-mode-alist '("\\.dat\\'" . ledger-mode))
)
#+END_SRC
* PDF-tools
##+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:ensure t
:config
(require 'pdf-tools)
(pdf-tools-install)
)
#+END_SRC
* ace jump mode
##+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:ensure t
:config
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
 (define-key global-map (kbd "C-c s") 'ace-jump-mode)
)
#+END_SRC
* latex stuff
** auctex
##+BEGIN_SRC emacs-lisp
(load "auctex.el" nil t t)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
#+END_SRC
** reftex
##+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
;; So that RefTeX finds my bibliography
(setq reftex-default-bibliography '("/home/nick/my_zotero.bib"))
#+END_SRC
** zotelo
##+BEGIN_SRC emacs-lisp
  (use-package zotelo
  :ensure t
  :config
  (add-hook 'TeX-mode-hook 'zotelo-minor-mode))
#+END_SRC
